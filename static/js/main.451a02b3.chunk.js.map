{"version":3,"sources":["logo.svg","myCssTest.module.css","components/DrawCanvas.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","drawToDom","text","elem","document","getElementById","currNum","parseInt","innerHTML","DrawCanvas","props","canvasRef","useRef","contextRef","useState","setIsDrawing","useEffect","canvas","current","width","height","style","context","getContext","scale","font","fillStyle","fillText","lineCap","strokeStyle","lineWidth","globalAlpha","touchAction","onPointerDown","nativeEvent","onPointerMove","onPointerUp","ref","left","margin","App","border","top","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8JAAAA,EAAOC,QAAU,IAA0B,kC,gBCC3CD,EAAOC,QAAU,CAAC,WAAa,8BAA8B,MAAQ,yBAAyB,SAAW,8B,sFC6EzG,IAAMC,EAAY,SAASC,GAC1B,IAAIC,EAAOC,SAASC,eAAe,SAC/BC,EAAUC,SAASJ,EAAKK,WAC5BL,EAAKK,UAAYF,EAAU,GAEbG,EAjFf,SAAoBC,GACnB,IAAMC,EAAYC,iBAAO,MACnBC,EAAaD,iBAAO,MAFA,EAGUE,oBAAS,GAHnB,mBAGPC,GAHO,WA2D1B,OAtDAC,qBAAU,WACT,IAAMC,EAASN,EAAUO,QACzBD,EAAOE,MAAsB,IAAdT,EAAMS,MACrBF,EAAOG,OAAwB,IAAfV,EAAMU,OACtBH,EAAOI,MAAMF,MAAb,UAAsC,IAAdT,EAAMS,MAAc,EAA5C,MACAF,EAAOI,MAAMD,OAAb,UAAwC,IAAfV,EAAMU,OAAe,EAA9C,MAMA,IAAME,EAAUL,EAAOM,WAAW,MAClCD,EAAQE,MAAM,EAAG,GACjBF,EAAQG,KAAO,aACfH,EAAQI,UAAY,UACpBJ,EAAQK,SAAR,4BAA8C,GAAIjB,EAAMU,OAAS,GACjEE,EAAQK,SAAR,4BAA8C,GAAIjB,EAAMU,OAAS,EAAI,IAErEE,EAAQM,QAAU,QAClBN,EAAQO,YAAc,UACtBP,EAAQQ,UAAY,EACpBR,EAAQS,YAAc,GAEtBlB,EAAWK,QAAUI,IACnB,IA+BF,kBAAC,WAAD,KACC,4BACCD,MAAO,CAAEW,YAAa,QACtBC,cAhCkB,SAAC,GAAoB,EAAlBC,YACvBnB,GAAa,IAgCXoB,cA1BiB,WASnBpB,GAAa,IAkBXqB,YAfU,SAAC,GAAoB,EAAlBF,YACfjC,KAeEoC,IAAK1B,IAEN,yBAAKU,MAAO,CAAEiB,KAAM,MACnB,4BAAQjB,MAAO,CAAEkB,OAAQ,KAAzB,QACA,4BAAQlB,MAAO,CAAEkB,OAAQ,KAAzB,YCzDWC,MAZf,WAGC,OACC,kBAAC,WAAD,KACC,yBAAKnB,MAAO,CAAEoB,OAAQ,kBAAmBtB,MAJ/B,IAI6CC,OAH5C,IAG4DkB,KAAM,QAASI,IAAK,UAC1F,kBAAC,EAAD,CAAYvB,MALH,IAKiBC,OAJhB,S,YCOMuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACR,kBAAC,IAAMC,WAAP,KAcC,kBAAC,EAAD,OAED9C,SAASC,eAAe,SD0GnB,kBAAmB8C,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.451a02b3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mytextarea\":\"myCssTest_mytextarea__Xzu0O\",\"myImg\":\"myCssTest_myImg__3k-Xv\",\"myCanvas\":\"myCssTest_myCanvas__1qVbM\"};","import React, { useRef, useState, useEffect, Fragment } from 'react';\r\n\r\nfunction DrawCanvas(props) {\r\n\tconst canvasRef = useRef(null);\r\n\tconst contextRef = useRef(null);\r\n\tconst [ isDrawing, setIsDrawing ] = useState(false);\r\n\r\n\tuseEffect(() => {\r\n\t\tconst canvas = canvasRef.current;\r\n\t\tcanvas.width = props.width * 1.5;\r\n\t\tcanvas.height = props.height * 1.5;\r\n\t\tcanvas.style.width = `${props.width * 1.5 / 2}px`;\r\n\t\tcanvas.style.height = `${props.height * 1.5 / 2}px`;\r\n\t\t// canvas.width = window.innerWidth * 2;\r\n\t\t// canvas.height = window.innerHeight * 2;\r\n\t\t// canvas.style.width = `${window.innerWidth}px`;\r\n\t\t// canvas.style.height = `${window.innerHeight}px`;\r\n\r\n\t\tconst context = canvas.getContext('2d');\r\n\t\tcontext.scale(2, 2);\r\n\t\tcontext.font = '40px Arial';\r\n\t\tcontext.fillStyle = '#00DADA';\r\n\t\tcontext.fillText(`noom4 is whaa a cutie pie`, 50, props.height / 4);\r\n\t\tcontext.fillText(`she's the real deal dude!`, 50, props.height / 4 + 60);\r\n\r\n\t\tcontext.lineCap = 'round';\r\n\t\tcontext.strokeStyle = '#1f2f3f';\r\n\t\tcontext.lineWidth = 2;\r\n\t\tcontext.globalAlpha = 0.3;\r\n\r\n\t\tcontextRef.current = context;\r\n\t}, []);\r\n\r\n\tconst startDrawing = ({ nativeEvent }) => {\r\n\t\tsetIsDrawing(true);\r\n\t\t// const { offsetX, offsetY } = nativeEvent;\r\n\t\t// contextRef.current.beginPath();\r\n\t\t// contextRef.current.moveTo(offsetX, offsetY);\r\n\t};\r\n\r\n\tconst stopDrawing = () => {\r\n\t\t// contextRef.current.closePath();\r\n\t\t//some code for accessing pixel values\r\n\t\t// if (contextRef) {\r\n\t\t// \tlet imgd = contextRef.current.getImageData(100, 100, 10, 10);\r\n\t\t// \tlet pix = imgd.data; // in this case, pix will have an array of length 400, (100 pixels, each with 4 numbers- red, green, blue and alpha)\r\n\t\t// \t// console.log(pix);\r\n\t\t// }\r\n\r\n\t\tsetIsDrawing(false);\r\n\t};\r\n\r\n\tconst draw = ({ nativeEvent }) => {\r\n\t\tdrawToDom();\r\n\t\tif (isDrawing) {\r\n\t\t\t// const { offsetX, offsetY } = nativeEvent;\r\n\t\t\t// contextRef.current.lineTo(offsetX, offsetY);\r\n\t\t\t// contextRef.current.stroke();\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<canvas\r\n\t\t\t\tstyle={{ touchAction: 'none' }}\r\n\t\t\t\tonPointerDown={startDrawing}\r\n\t\t\t\tonPointerMove={stopDrawing}\r\n\t\t\t\tonPointerUp={draw}\r\n\t\t\t\tref={canvasRef}\r\n\t\t\t/>\r\n\t\t\t<div style={{ left: 250 }}>\r\n\t\t\t\t<button style={{ margin: 10 }}>DRAW</button>\r\n\t\t\t\t<button style={{ margin: 10 }}>ERASE</button>\r\n\t\t\t</div>\r\n\t\t</Fragment>\r\n\t);\r\n}\r\n\r\nconst drawToDom = function(text) {\r\n\tlet elem = document.getElementById('debug');\r\n\tlet currNum = parseInt(elem.innerHTML);\r\n\telem.innerHTML = currNum + 1;\r\n};\r\nexport default DrawCanvas;\r\n","import React, { useRef, useState, useEffect, Fragment } from 'react';\nimport DrawCanvas from './components/DrawCanvas';\n\nfunction App() {\n\tlet width = 600;\n\tlet height = 600;\n\treturn (\n\t\t<Fragment>\n\t\t\t<div style={{ border: 'solid black 3px', width: width, height: height, left: '300px', top: '100px' }}>\n\t\t\t\t<DrawCanvas width={width} height={height} />\n\t\t\t</div>\n\t\t</Fragment>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport logo from './logo.svg';\nimport styles from './myCssTest.module.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t{/* <div>\n\t\t\t{' '}\n\t\t\tmy app\n\t\t\t<textarea\n\t\t\t\trows={20}\n\t\t\t\tvalue={\n\t\t\t\t\t'If you want your app to work offline and load faster, you can change If you want your app to work offline and load faster, you can change'\n\t\t\t\t}\n\t\t\t\tclassName={styles.mytextarea}\n\t\t\t/>\n\t\t\t\n\t\t</div> */}\n\t\t{/* <img src={logo} className=\"App-logo\" alt=\"logo\" className={styles.myImg} /> */}\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}